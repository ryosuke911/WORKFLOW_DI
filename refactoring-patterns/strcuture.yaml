refactoring-patterns:
  1-parameter-injection:
    description: "パラメータを通じて依存性を注入するパターン群"
    purpose: "最も基本的な依存性注入の手法を集めたもの"
    files:
      12-constructor-parameterization.md:
        summary: "コンストラクタ内で直接生成しているオブジェクトを、外部から注入できるように変更する手法。コンストラクタの引数として依存オブジェクトを受け取ることで、テスト時にモックオブジェクトを注入可能になり、既存コードとの互換性を維持するためにデフォルトコンストラクタも残す。"

      13-method-parameterization.md:
        summary: "メソッド内で直接生成されているオブジェクトを、メソッドの引数として外部から受け取るように変更する手法。メソッドの引数としてオブジェクトを受け取ることで、テスト時に異なる実装を注入可能になり、既存メソッドはデフォルト実装として維持する。"

      14-parameter-primitivization.md:
        summary: "複雑なオブジェクトの代わりに、プリミティブ型のパラメータを使用する手法。複雑なオブジェクトをプリミティブ値に分解することで、テストデータの準備が容易になり、依存関係を削減できる。ただし、過度な分解は避け、適切な粒度を保つ必要がある。"

      1-parameter-adaptation.md:
        summary: "既存のパラメータを新しいインターフェースに適合させる手法。アダプターパターンを活用することで、既存コードを変更せずにインターフェースを変更でき、段階的な移行が可能になる。特にレガシーシステムの改善に有効。"

  2-interface-abstraction:
    description: "インターフェースや抽象化を用いて依存関係を分離するパターン群"
    purpose: "より柔軟な設計のための抽象化手法を集めたもの"
    files:
      8-implementation-extraction.md:
        summary: "具体的な実装をサブクラスに移動し、スーパークラスを抽象化する手法。実装の詳細を隠蔽することで、テスト用の実装を容易に追加可能になり、依存関係を分離できる。特に複数の実装が必要な場合や、テスト時に異なる振る舞いが必要な場合に有効。"

      9-interface-extraction.md:
        summary: "クラスから特定の機能をインターフェースとして抽出する手法。機能を明確に分離し、モックオブジェクトの作成を容易にする。依存関係を抽象化することで、システムの柔軟性が向上し、特にテスト時の依存性注入が容易になる。"

      15-method-and-variable-elevation.md:
        summary: "共通のメソッドや変数をスーパークラスに移動する手法。コードの重複を削減し、共通機能を集約することでメンテナンス性が向上する。特に複数のサブクラスで同じような実装が繰り返されている場合に効果的。"

      16-dependency-push-out.md:
        summary: "テストが困難な依存関係を新しいサブクラスに押し出す手法。責務を明確化し、テスト容易性を向上させる。特にデータベースやネットワーク通信など、外部リソースへの依存がある場合に有効。"

  3-object-creation:
    description: "オブジェクト生成に関する依存関係を制御するパターン群"
    purpose: "インスタンス生成の柔軟性を高めるための手法を集めたもの"
    files:
      6-factory-method-extraction-and-override.md:
        summary: "オブジェクト生成をFactory Methodとして抽出し、サブクラスでオーバーライド可能にする手法。オブジェクト生成の柔軟性を向上させ、テスト用オブジェクトの生成を容易にする。生成ロジックを集中管理することで、システム全体の一貫性も保てる。"

      2-method-object-extraction.md:
        summary: "複雑なメソッドを独立したクラスとして抽出する手法。メソッドの責務を明確化し、テスト容易性と再利用性を向上させる。特に長大なメソッドや、複数の責務が混在しているメソッドのリファクタリングに効果的。"

      18-subclassing-and-method-override.md:
        summary: "既存クラスをサブクラス化してメソッドをオーバーライドする手法。既存コードを変更せずに機能拡張が可能で、テスト用の実装を追加できる。段階的なリファクタリングが可能なため、リスクを最小限に抑えられる。"

  4-global-static-management:
    description: "グローバルや静的な依存関係を管理するパターン群"
    purpose: "レガシーコードでよく見られる問題に対処する手法を集めたもの"
    files:
      3-global-reference-encapsulation.md:
        summary: "グローバル変数や関数への直接参照をカプセル化する手法。グローバルな依存を局所化し、テスト時の制御を容易にする。変更の影響範囲を限定できるため、大規模なレガシーシステムの改善に特に有効。"

      4-static-method-exposure.md:
        summary: "静的メソッドをインスタンスメソッドとして公開する手法。静的メソッドへの依存を分離し、テスト容易性を向上させる。柔軟な拡張が可能になり、特にレガシーシステムの段階的な改善に効果的。"

      11-static-set-method-introduction.md:
        summary: "静的な依存関係を外部から設定可能にする手法。テスト時の依存関係の制御を可能にし、設定の柔軟性を向上させる。グローバルな状態を管理しやすくなり、特にシングルトンパターンの改善に有効。"

      17-global-reference-replacement-with-get-method.md:
        summary: "グローバル参照をgetメソッドを通じたアクセスに置き換える手法。グローバル参照を間接化し、テスト時の差し替えを容易にする。依存関係を明確化でき、特にレガシーコードの段階的な改善に適している。"

  5-delegation-encapsulation:
    description: "委譲やカプセル化によって依存関係を管理するパターン群"
    purpose: "既存コードへの影響を最小限に抑えつつリファクタリングする手法を集めたもの"
    files:
      5-call-extraction-and-override.md:
        summary: "メソッド呼び出しを抽出し、サブクラスでオーバーライド可能にする手法。メソッド呼び出しを分離し、テスト用の実装を追加できるようにする。段階的な改善が可能で、特に複雑な依存関係を持つメソッドの改善に効果的。"

      7-get-method-extraction-and-override.md:
        summary: "getメソッドを抽出し、サブクラスでオーバーライド可能にする手法。アクセサメソッドを柔軟化し、テスト時の値の制御を可能にする。依存関係を分離でき、特にデータアクセスの抽象化に有効。"

      10-instance-delegation-introduction.md:
        summary: "静的メソッドの呼び出しをインスタンスメソッドに委譲する手法。静的な依存を分離し、テスト容易性を向上させる。柔軟な拡張が可能になり、特にレガシーシステムの静的メソッドの改善に効果的。"